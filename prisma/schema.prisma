// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Gym {
  id              String          @id @default(cuid())
  name            String          @unique
  cssCode         String
  classes         ClimbingClass[] @relation("GymsToClasses")
  waitlistEntries WaitlistEntry[] @relation("GymsToWaitlist")
  offers          Offer[]         @relation("GymToOffer")
  campWeeks       CampWeek[]      @relation("GymsToCampWeek")
}

model ClimbingClass {
  id              String          @id @default(cuid())
  cssCode         String
  className       String
  gym             Gym             @relation("GymsToClasses", fields: [gymId], references: [id], onDelete: Cascade)
  gymId           String
  climbers        Climber[]
  day             String
  instructor      String
  startTime       DateTime
  endTime         DateTime
  slots           Int
  climbingSession ClimbingSession @relation("SessionToClass", fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId       String
  offers          Offer[]         @relation("OfferToClass")
}

model Climber {
  id              String          @id @default(cuid())
  name            String
  classes         ClimbingClass[]
  parentEmail     String
  waitlistEntries WaitlistEntry[] @relation("ClimberToWaitlist")
  offers          Offer[]         @relation("OfferToClimber")
  logs            ClimberLog[]    @relation("ClimberToLogEntry")
  campWeeks       CampWeek[]

  @@unique([name, parentEmail])
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  gym       Gym      @relation("GymsToWaitlist", fields: [gymId], references: [id], onDelete: Cascade)
  gymId     String
  climber   Climber  @relation("ClimberToWaitlist", fields: [climberId], references: [id], onDelete: Cascade)
  climberId String
  priority  Boolean  @default(false)
  notes     String?
  mon       Boolean  @default(false)
  tues      Boolean  @default(false)
  weds      Boolean  @default(false)
  thurs     Boolean  @default(false)
  fri       Boolean  @default(false)
  sat       Boolean  @default(false)
  sun       Boolean  @default(false)
  createdAt DateTime @default(now())
  classType String

  @@unique([gymId, climberId, classType])
}

model Offer {
  id            String        @id @default(cuid())
  user          User          @relation("UserToOffer", fields: [userId], references: [id], onDelete: Cascade)
  gym           Gym           @relation("GymToOffer", fields: [gymId], references: [id], onDelete: Cascade)
  gymId         String
  userId        String
  climbingClass ClimbingClass @relation("OfferToClass", fields: [classId], references: [id], onDelete: Cascade)
  classId       String
  climber       Climber       @relation("OfferToClimber", fields: [climberId], references: [id], onDelete: Cascade)
  climberId     String
  notes         String
  zendeskTicket String
  createdAt     DateTime      @default(now())
  expiration    DateTime
  updatedAt     DateTime      @updatedAt

  @@unique([climberId, classId])
}

model ClimberLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  message   String
  climber   Climber  @relation("ClimberToLogEntry", fields: [climberId], references: [id], onDelete: Cascade)
  climberId String
}

model ClimbingSession {
  id              String          @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  notes           String?
  year            Int
  current         Boolean
  upcoming        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  climbingClasses ClimbingClass[] @relation("SessionToClass")

  @@unique([name, year])
}

model CampWeek {
  id         String    @id @default(cuid())
  weekNumber Int
  year       Int
  startDate  DateTime
  endDate    DateTime
  gym        Gym       @relation("GymsToCampWeek", fields: [gymId], references: [id], onDelete: Cascade)
  gymId      String
  climbers   Climber[]
  instructor String
  slots      Int

  @@unique([gymId, weekNumber])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  offers           Offer[]   @relation("UserToOffer")
  defaultSessionId String?   @default("clax6vjbb000eovi4u8k1fb0c")
  showCamp         Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
